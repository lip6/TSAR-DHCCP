#define p0_w_rd (Processeur0.wait_rd)
#define p0_w_wr (Processeur0.wait_wr)
#define p0_rdy (Processeur0.ready)

#define p1_w_rd (Processeur1.wait_rd)
#define p1_w_wr (Processeur1.wait_wr)
#define p1_rdy (Processeur1.ready)

#define ch_l1pdtack_ety (chan_L1PDTACK0_full == 0)
#define rd_addr_1 (chan_PL1DTREQ_full == 1 && chan_PL1DTREQ_addr == 1 && chan_PL1DTREQ_type == 0)

#define clnup_0 (chan_L1MCCUREQ_full == 1 && chan_L1MCCUREQ_type == 8 && chan_L1MCCUREQ_addr == 0)

#define rd_dt (chan_PL1DTREQ_full == 1 && chan_PL1DTREQ_type == 0)

#define wr_addr0_0 (chan_PL1DTREQ0_full == 1 && chan_PL1DTREQ0_type == 1 && chan_PL1DTREQ0_addr == 0)
#define wr_addr0_1 (chan_PL1DTREQ0_full == 1 && chan_PL1DTREQ0_type == 1 && chan_PL1DTREQ0_addr == 1)

#define wr_addr1_0 (chan_PL1DTREQ1_full == 1 && chan_PL1DTREQ1_type == 1 && chan_PL1DTREQ1_addr == 0)
#define wr_addr1_1 (chan_PL1DTREQ1_full == 1 && chan_PL1DTREQ1_type == 1 && chan_PL1DTREQ1_addr == 1)

#define wr_0 (chan_L1MCDTREQ_full == 1 && chan_L1MCDTREQ_type == 5 && chan_L1MCDTREQ_addr == 0)
#define wr_1 (chan_L1MCDTREQ_full == 1 && chan_L1MCDTREQ_type == 5 && chan_L1MCDTREQ_addr == 1)

#define up0_0 (chan_MCL1CPREQ_full == 1 && chan_MCL1CPREQ_type == 12 && chan_MCL1CPREQ_addr == 0 && chan_MCL1CPREQ_id == 0 )
#define up1_0 (chan_MCL1CPREQ_full == 1 && chan_MCL1CPREQ_type == 12 && chan_MCL1CPREQ_addr == 0 && chan_MCL1CPREQ_id == 1 )

#define b_inv (chan_MCL1CPREQ_full == 1 && chan_MCL1CPREQ_type == 10 && chan_MCL1CPREQ_addr == 0 )
#define m_inv (chan_MCL1CPREQ_full == 1 && chan_MCL1CPREQ_type == 11 && chan_MCL1CPREQ_addr == 0 )

#define dt_rd (chan_PL1DTREQ_type == 0)
#define dt_wr (chan_PL1DTREQ_type == 1)

#define addr_req_0 (chan_PL1DTREQ_addr == 0)
#define addr_req_1 (chan_PL1DTREQ_addr == 1)

#define ack_dt_rd_0 (chan_L1PDTACK0_type == 2)
#define ack_dt_wr_0 (chan_L1PDTACK0_type == 3)

#define ack_dt_rd_1 (chan_L1PDTACK1_type == 2)
#define ack_dt_wr_1 (chan_L1PDTACK1_type == 3)

#define cl1_0_addr_0 (cl1_0_addr_save == 0)
#define cl1_0_addr_1 (cl1_0_addr_save == 1)

#define cl1_1_addr_0 (cl1_1_addr_save == 0)
#define cl1_1_addr_1 (cl1_1_addr_save == 1)

#define wr ( chan_L1MCDTREQ_type == 5)

#define ack_wr (chan_MCL1DTACK_type == 7)

#define cl1_0_ety (CacheL1_0.empty)

#define cl1_0_v_dt (CacheL1_0.valid_data)
#define cl1_1_v_dt (CacheL1_1.valid_data)

#define cl1_0_ms (CacheL1_0.miss)
#define cl1_0_wwi (CacheL1_0.write_wait_empty)

#define cl1_1_ms (CacheL1_1.miss)
#define cl1_1_wwi (CacheL1_1.write_wait_empty)

#define addr_cache_0 (addr_cache == 0)
#define addr_cache_1 (addr_cache == 1)

#define cm_vm_0 (Mem_cache0.valid_multicast)
#define cm_vm_1 (Mem_cache1.valid_multicast)

#define cm_vm_clnup (Mem_cache1.valid_multicast_clnup)


#define cm_vm_u_0 (Mem_cache0.valid_multicast_update)
#define cm_vm_u_1 (Mem_cache1.valid_multicast_update)

#define cm_ety_0 (Mem_cache0.empty)
#define cm_ety_1 (Mem_cache1.empty)


#define ligne_valid0 (v_cache_valide0 == 1)
#define ligne_invalid0 (v_cache_valide0 == 0)

#define ligne_valid1 (v_cache_valide1 == 1)
#define ligne_invalid1 (v_cache_valide1 == 0)

#define nb_copie_addr0_vide (n_cache0 == 0)
#define nb_copie_addr0 (n_cache0 == 1)

#define nb_copie (n_cache0 == 2)


#define nb_copie_addr1_vide (n_cache1 == 0)
#define nb_copie_addr1 (n_cache1 == 1)

//#property G(F(p0_w_rd || p0_w_wr || p1_w_rd || p1_w_wr))  // vrai : Infiniment souvent à un moment le processeur0 / processeur1 est en attente de lecture ou d'écriture de la donnée d'adresse 0

//#property G(F(p0_w_rd || p0_w_wr )) // vrai avec la commande fair

//#property G(F(p0_w_rd || p0_w_wr))  // vrai avec la commande fair

//#property G(((p0_w_rd || p0_w_wr) -> F(p0_rdy)) || ((p1_w_rd || p1_w_wr) -> F(p1_rdy)))  
// vrai : Infiniment souvent à un moment si le processeur0 / processeur1  est en attente de lecture ou d'écriture alors à un moment dans le future il reçoit l'acquittement à sa demande puis passe à l'état ready.

//#property G((p0_w_rd || p0_w_wr) -> F(p0_rdy))  // vrai avec la commande fair

//#property G((p1_w_rd || p1_w_wr) -> F(p1_rdy))  // vrai avec la commande fair


//#property G((p0_w_rd -> F(cl1_0_v_dt)) || (p1_w_rd -> F(cl1_1_v_dt)))   // vrai : infiniment souvent si le processeur0 /  processeur1 est à l'état wait_rd alors à un moment dans le future son CacheL1 passe à l'état valid_data

//#property G(p0_w_rd -> F(cl1_0_v_dt)) // vrai  avec la commande fair

//#property G(p1_w_rd -> F(cl1_1_v_dt)) // vrai  avec la commande fair

//#property G(((p0_w_rd && cl1_0_v_dt) -> F(cl1_0_v_dt && ack_dt_rd_0))  || ((p1_w_rd && cl1_1_v_dt) -> F(cl1_1_v_dt && ack_dt_rd_1)))  // vrai : infiniment souvent si le processeur 0 ou le processeur 1 est à l'état wait_rd et que le CacheL1_0 ou  CacheL1_1  est à l'état valid_data alors à un moment dans le future le CacheL1_0 ou CacheL1_1 reste dans le même état et répond au processeur 0 ou processeur 1 en envoyant ACK_DT_RD  

//#property G((p0_w_rd && cl1_0_v_dt) -> F(cl1_0_v_dt && ack_dt_rd_0)) // vrai  avec la commande fair

//#property G((p1_w_rd && cl1_1_v_dt) -> F(cl1_1_v_dt && ack_dt_rd_1)) // vrai  avec la commande fair

//#property G(((p0_w_wr && cl1_0_v_dt) -> F(cl1_0_v_dt && ack_dt_wr_0)) || ((p1_w_wr && cl1_1_v_dt) -> F(cl1_1_v_dt && ack_dt_wr_1)))  // vrai : infiniment souvent si le processeur 0 ou le processeur 1 est à l'état wait_wr et que le CacheL1_0 ou CacheL1_1 est à l'état valid_data alors à un moment dans le future le CacheL1 retourne vers cet état et répond au processeur 0 ou processeur 1 en envoyant ACK_DT_WR  

//#property G((p0_w_wr && cl1_0_v_dt) -> F(cl1_0_v_dt && ack_dt_wr_0)) // vrai  avec la commande fair

//#property G((cl1_0_ms || cl1_1_ms || cl1_0_wwi || cl1_1_wwi)->  F(cm_vm_0)) // vrai  avec la commande fair : Infiniment souvent si le cacheL1_0 /  cacheL1_1 est à l'état Miss ou Write_wite_valid alors à un moment dans le future le Contrôleur Mémoire de l'adresse 0 passe à l'état valid_multicast. 

//#property G((p0_w_rd -> (p0_w_rd U ack_dt_rd_0)) ||  (p1_w_rd -> (p1_w_rd U ack_dt_rd_1)))  // vrai : infiniment souvent si le processeur0 / processeur1 est à l'état wait_rd alors il reste dans cet état jusqu'à réception du ACK_DT_RD

//#property G(p0_w_rd -> (p0_w_rd U ack_dt_rd_0)) // vrai  avec la commande fair

//#property G((p0_w_wr -> (p0_w_wr U ack_dt_wr_0)) || (p1_w_wr -> (p1_w_wr U ack_dt_wr_1)))  // vrai :  infiniment souvent,  si le Processeur0 / processeur1 	est en attente d'écriture alors il va rester dans cet état jusqu'à réception d'un acquittement à sa demande d'écriture. 

//#property G(p0_w_wr -> (p0_w_wr U ack_dt_wr_0))  // vrai  avec la commande fair


//#property G(((p0_w_wr && cl1_0_ety) && ch_l1pdtack_ety) -> F(cl1_0_wwi))   // vrai : infiniment souvent si le processeur est à l'état wait_wr et que le cacheL1 est à l'état empty et que chan_L1PDTACK_full est vide alors à un moment dans le futur le cacheL1 passe à l'état write_wait_empty   


//#property G((wr_addr0_0 && cm_ety_0) -> F(cm_vm_0 && nb_copie_addr0)) // vrai avec la commande fair : infiniment souvent si le processeur0 envoie une demande d'écriture sur la donnée d'adresse 0 et que le contrôleur mémoire est à l'état empty alors à un moment dans le future le controleur mémoire passe à l'état valide_multicast et le nombre de copies est égale à 1
//#property G((wr_addr1_0 && cm_ety_0) -> F(cm_vm_0 && nb_copie_addr0)) // vrai avec la commande fair : infiniment souvent si le processeur1 envoie une demande d'écriture sur la donnée d'adresse 0 et que le contrôleur mémoire est à l'état empty alors à un moment dans le future le controleur mémoire passe à l'état valide_multicast et le nombre de copies est égale à 1


//#property G((ligne_valid0 && ligne_valid1 && wr_addr0_0) -> F (up1_0))  // vrai avec la commande fair : Infiniment souvent si les lignes des deux cacheL1_0 et cacheL1_1 sont valides, contiennent la donnée d'adresse 0, et que le processeur0 envoie une demande d'écriture sur cette même donnée alors à un moment dans le future le contrôleur mémoire envoie un multicast_update pour le cacheL1_1 pour mettre à jour sa donnée de cache.

//#property G((ligne_valid0 && ligne_valid1 && wr_addr1_0) -> F (up0_0))  // vrai avec la commande fair : Infiniment souvent si les lignes des deux cacheL1_0 et cacheL1_1 sont valides, contiennent la donnée d'adresse 0, et que le processeur1 envoie une demande d'écriture sur cette même donnée alors à un moment dans le future le contrôleur mémoire envoie un multicast_update pour le cacheL1_0 pour mettre à jour sa donnée de cache.

//#property G((ligne_valid0 && ligne_valid1) -> (nb_copie))  // vrai avec la commande fair :  infiniment souvent si les lignes des deux cacheL1_0 et cacheL1_1 sont valides, contiennent la donnée d'adresse 0, alors on le compteur de copies au niveau du controleur mémoire qui est égal à 2. 

//#property G(!F(clnup_0))  // vrai avec la commande fair : Infiniment souvent aucun des deux cacheL1 n'envoie de clean_up au contrôleur mémoire.

//#property G(!F(b_inv) && !F(m_inv) )  // vrai avec la commande fair : Infiniment souvent le contrôleur mémoire n'envoie jamais des messages du type : Broadcast_invalidat et Multicast_invalidat.























